1. In this lesson, you created a middleware function called asyncWrapper. Why?
-Instead of calling a try catch block on every function we created this middleware which wraps any function so when the function is called
the wrapper runs the try and if there is an error its caught and moves to the next(error) from the error handler middleware.

2. Suppose that you want to make sure that both a status code and and error message are send back to the user when they request the URL 
for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. 
Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
    const {id: taskID} = req.params
    const task = await Task.findOne({ _id: taskID })
    if (!task){
       retun next(createCustomError(`No task with id: ${taskID}`, 404));
    }
    res.status(200).json({ task })
})